<?xml version='1.0'?>
<!--Generated by xmldoc v10.2.3 on 05 JUN 2014 10:21:25-->
<doc>
  <assembly>
    <name>AsyncServices</name>
  </assembly>
  <members>
    <member name="T:BusinessLogic.AsyncServices">
       <summary>
       This class exposes asynchronous wrappers for Synergy methods to the
       client application. Notice that it is a PARTIAL class, so additional
       code generated methods can be added (for example via the AsyncServicesCRUD
       template), and other hand-crafted methods could be added in seperate source files.
       </summary>
    </member>
    <member name="T:BusinessLogic.AsyncServices">
       <summary>
       This class exposes ASYNCHRONOUS wrappers for the CRUD methods for ProductGroup
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main AsyncServices class defined in AsyncServices.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.CreateProductGroup(BusinessLogic.ProductGroup)">
       <summary>
       Creare a new ProductGroup record (async)
       </summary>
       <param name="aProductGroup">Passed ProductGroup object (@ProductGroup)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadAllProductGroups">
       <summary>
       Read all ProductGroup records (async)
       </summary>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadProductGroup(System.String)">
       <summary>
       Read a ProductGroup record by primary key (GROUP_ID: primary access key) (async)
       </summary>
       <param name="aGroupId">Passed group id (String)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.UpdateProductGroup(BusinessLogic.ProductGroup,System.String)">
       <summary>
       Update a ProductGroup record (async)
       </summary>
       <param name="aProductGroup">Passed/returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Passed/returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.DeleteProductGroup(System.String)">
       <summary>
       Delete a ProductGroup record (async)
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ProductGroupExists(System.String)">
       <summary>
       Determine if a ProductGroup record exists (async)
       </summary>
       <param name="GroupId">Passed group id (string)</param>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.DataUtils">
       <summary>
       Various data conversion utility methods
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.DateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D8FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.NullableDateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D8FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.TimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D4FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.NullableTimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D4FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="T:BusinessLogic.BackgroundDispatcher">
       <summary>
       The BackgroundDispatcher class can be used to control
       processing of background tasks on different threads
       </summary>
    </member>
    <member name="P:BusinessLogic.BackgroundDispatcher.UtilityBackgroundDispatcher">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.AllocateDispatcher">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.DeallocateDispatcher(BusinessLogic.BackgroundDispatcher)">
       <summary>
      
       </summary>		
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.ShutdownDispatcher">
       <summary>
      
       </summary>		
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.#ctor">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.Dispose">
       <summary>
      Clean up when this object is disposed
       </summary>
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.Dispatch(System.Action)">
       <summary>
      
       </summary>
       <param name=action>The action to complete</param>
       <return>Return the created task that is performing the requested action.</return>
    </member>
    <member name="M:BusinessLogic.BackgroundDispatcher.Dispatch(System.Func{T})">
       <summary>
      
       </summary>
       <param name=action>The action to complete</param>
       <return>Return the created task that is performing the requested action.</return>
    </member>
    <member name="T:BusinessLogic.AsyncServices">
       <summary>
       This class exposes ASYNCHRONOUS wrappers for the CRUD methods for Supplier
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main AsyncServices class defined in AsyncServices.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.CreateSupplier(BusinessLogic.Supplier)">
       <summary>
       Creare a new Supplier record (async)
       </summary>
       <param name="aSupplier">Passed Supplier object (@Supplier)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadAllSuppliers">
       <summary>
       Read all Supplier records (async)
       </summary>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadSupplier(System.String)">
       <summary>
       Read a Supplier record by primary key (SUPPLIER_ID: primary access key) (async)
       </summary>
       <param name="aSupplierId">Passed supplier id (String)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.UpdateSupplier(BusinessLogic.Supplier,System.String)">
       <summary>
       Update a Supplier record (async)
       </summary>
       <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Passed/returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.DeleteSupplier(System.String)">
       <summary>
       Delete a Supplier record (async)
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.SupplierExists(System.String)">
       <summary>
       Determine if a Supplier record exists (async)
       </summary>
       <param name="SupplierId">Passed supplier id (string)</param>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.AsyncServices">
       <summary>
       This class exposes async wrappers for hand-crafted methods to the client
       application. Notice that this is a PARTIAL class, so the methods are added
       to the main AsyncServices class defined in AsyncServices.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.Login(System.String,System.String)">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.GetOpenChannels">
       <summary>
       Test method to retrieve a collection of currently open channels.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.OpenChannel">
       <summary>
       Test method to open a channel.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.CloseAllChannels">
       <summary>
       Test method to close all currently open channels.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.GetProductGroupParts(System.String)">
       <summary>
       Read all Part records (async)
       </summary>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.AsyncServices">
       <summary>
       This class exposes ASYNCHRONOUS wrappers for the CRUD methods for Part
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main AsyncServices class defined in AsyncServices.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.AsyncServices.CreatePart(BusinessLogic.Part)">
       <summary>
       Creare a new Part record (async)
       </summary>
       <param name="aPart">Passed Part object (@Part)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadAllParts">
       <summary>
       Read all Part records (async)
       </summary>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.ReadPart(System.String)">
       <summary>
       Read a Part record by primary key (ID: primary part id) (async)
       </summary>
       <param name="aId">Passed part ID (String)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.UpdatePart(BusinessLogic.Part,System.String)">
       <summary>
       Update a Part record (async)
       </summary>
       <param name="aPart">Passed/returned Part object (@Part)</param>
       <param name="aGrfa">Passed/returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.DeletePart(System.String)">
       <summary>
       Delete a Part record (async)
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.AsyncServices.PartExists(System.String)">
       <summary>
       Determine if a Part record exists (async)
       </summary>
       <param name="Id">Passed part ID (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.ProductGroup.#ctor">
       <summary>
       Construct an empty ProductGroup object
       </summary>
    </member>
    <member name="M:BusinessLogic.ProductGroup.#ctor(BusinessLogic.strProductGroup)">
       <summary>
       Construct a ProductGroup object containing the data from a PRODUCT_GROUP record
       </summary>
       <param name="aProductGroup">Passed ProductGroup record (strProductGroup)</param>
    </member>
    <member name="P:BusinessLogic.ProductGroup.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.ProductGroup.GroupId">
       <summary>
       group id (GROUP_ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.ProductGroup.Description">
       <summary>
       description (DESCRIPTION, A100)
       </summary>
    </member>
    <member name="M:BusinessLogic.ProductGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Serialize a ProductGroup object to a string
       </summary>
    </member>
    <member name="M:BusinessLogic.ProductGroup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Deserialize a string back to a ProductGroup object
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.#ctor">
       <summary>
       Construct an empty Part object
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.#ctor(BusinessLogic.strPart)">
       <summary>
       Construct a Part object containing the data from a PART record
       </summary>
       <param name="aPart">Passed Part record (strPart)</param>
    </member>
    <member name="P:BusinessLogic.Part.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Id">
       <summary>
       part ID (ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Groupid">
       <summary>
       Group ID (GROUPID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Supplierid">
       <summary>
       supplier id (SUPPLIERID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Description">
       <summary>
       Description (DESCRIPTION, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.TechnicalInfo">
       <summary>
       Technical info (TECHNICAL_INFO, A500)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Quantity">
       <summary>
       quantity in stock (QUANTITY, I4)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.CostPrice">
       <summary>
       cost price (COST_PRICE, D10.2)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Spare">
       <summary>
       (SPARE, A76)
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Serialize a Part object to a string
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Deserialize a string back to a Part object
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for ProductGroup
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreateProductGroup(BusinessLogic.ProductGroup)">
       <summary>
       Create a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed ProductGroup object (@ProductGroup)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllProductGroups(System.Collections.Generic.List{ProductGroup})">
       <summary>
       Real all ProductGroup records
       </summary>
       <param name="aProductGroups">Returned collection of ProductGroup objects (@List&lt;ProductGroup&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadProductGroup(System.String,BusinessLogic.ProductGroup,System.String)">
       <summary>
       Read a ProductGroup record by primary key (GROUP_ID: primary access key)
       </summary>
       <param name="aGroupId">Passed group id (String)</param>
       <param name="aProductGroup">Returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdateProductGroup(BusinessLogic.ProductGroup,System.String)">
       <summary>
       Update a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed/returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeleteProductGroup(System.String)">
       <summary>
       Delete a ProductGroup record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ProductGroupExists(System.String)">
       <summary>
       Determine if a ProductGroup record exists
       </summary>
       <param name="aGroupId">Passed group id (string)</param>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for Supplier
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreateSupplier(BusinessLogic.Supplier)">
       <summary>
       Create a Supplier record
       </summary>
       <param name="aSupplier">Passed Supplier object (@Supplier)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllSuppliers(System.Collections.Generic.List{Supplier})">
       <summary>
       Real all Supplier records
       </summary>
       <param name="aSuppliers">Returned collection of Supplier objects (@List&lt;Supplier&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadSupplier(System.String,BusinessLogic.Supplier,System.String)">
       <summary>
       Read a Supplier record by primary key (SUPPLIER_ID: primary access key)
       </summary>
       <param name="aSupplierId">Passed supplier id (String)</param>
       <param name="aSupplier">Returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdateSupplier(BusinessLogic.Supplier,System.String)">
       <summary>
       Update a Supplier record
       </summary>
       <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeleteSupplier(System.String)">
       <summary>
       Delete a Supplier record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.SupplierExists(System.String)">
       <summary>
       Determine if a Supplier record exists
       </summary>
       <param name="aSupplierId">Passed supplier id (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Supplier.#ctor">
       <summary>
       Construct an empty Supplier object
       </summary>
    </member>
    <member name="M:BusinessLogic.Supplier.#ctor(BusinessLogic.strSupplier)">
       <summary>
       Construct a Supplier object containing the data from a SUPPLIER record
       </summary>
       <param name="aSupplier">Passed Supplier record (strSupplier)</param>
    </member>
    <member name="P:BusinessLogic.Supplier.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.SupplierId">
       <summary>
       supplier id (SUPPLIER_ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Name">
       <summary>
       supplier name (NAME, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address1">
       <summary>
       addrss line 1 (ADDRESS_1, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address2">
       <summary>
       address line 2 (ADDRESS_2, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address3">
       <summary>
       address line 3 (ADDRESS_3, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.City">
       <summary>
       city (CITY, A30)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.PostalCode">
       <summary>
       post code (POSTAL_CODE, A10)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.WebAddress">
       <summary>
       web address (WEB_ADDRESS, A78)
       </summary>
    </member>
    <member name="M:BusinessLogic.Supplier.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Serialize a Supplier object to a string
       </summary>
    </member>
    <member name="M:BusinessLogic.Supplier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
       <summary>
       Deserialize a string back to a Supplier object
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for Part
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreatePart(BusinessLogic.Part)">
       <summary>
       Create a Part record
       </summary>
       <param name="aPart">Passed Part object (@Part)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllParts(System.Collections.Generic.List{Part})">
       <summary>
       Real all Part records
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadPart(System.String,BusinessLogic.Part,System.String)">
       <summary>
       Read a Part record by primary key (ID: primary part id)
       </summary>
       <param name="aId">Passed part ID (String)</param>
       <param name="aPart">Returned Part object (@Part)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdatePart(BusinessLogic.Part,System.String)">
       <summary>
       Update a Part record
       </summary>
       <param name="aPart">Passed/returned Part object (@Part)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeletePart(System.String)">
       <summary>
       Delete a Part record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.PartExists(System.String)">
       <summary>
       Determine if a Part record exists
       </summary>
       <param name="aId">Passed part ID (string)</param>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes Synergy methods to the client application. Notice that
       it is a PARTIAL class, so additional code generated methods can be added
       to the class (for example via the ServicesCRUD template), and other
       hand-crafted methods could be added in seperate source files.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.InitializeLifetimeService">
       <summary>
       This method ensures that the lifetime of the proxy for objects
       is set to an indefinite period of time. This is OK because the
       lifetime of the containing AppDomain is managed based on the
       lifetime of the ASP.NET session.
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes hand-crafted methods to the client application.
       Notice that this is a PARTIAL class, so the methods are added to
       the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.#ctor">
       <summary>
       Constructs a new Services object.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.Login(System.String,System.String,System.String)">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.GetOpenChannels">
       <summary>
       Test method to retrieve a collection of currently open channels.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.OpenChannel">
       <summary>
       Test method to open a channel.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CloseAllChannels">
       <summary>
       Test method to close all currently open channels.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.GetProductGroupParts(System.String,System.Collections.Generic.List{Part})">
       <summary>
       Get all Part records for a product group.
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
  </members>
</doc>
